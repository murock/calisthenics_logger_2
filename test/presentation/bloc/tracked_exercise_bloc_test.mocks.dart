// Mocks generated by Mockito 5.0.7 from annotations
// in calisthenics_logger_2/test/presentation/bloc/tracked_exercise_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:calisthenics_logger_2/core/error/failures.dart' as _i6;
import 'package:calisthenics_logger_2/core/util/params.dart' as _i8;
import 'package:calisthenics_logger_2/domain/entities/tracked_exercise.dart'
    as _i7;
import 'package:calisthenics_logger_2/domain/repos/tracked_exercise_repo.dart'
    as _i2;
import 'package:calisthenics_logger_2/domain/usecases/get_specific_tracked_exercise_on_date.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeTrackedExerciseRepo extends _i1.Fake
    implements _i2.TrackedExerciseRepo {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetSpecificTrackedExerciseOnDate].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSpecificTrackedExerciseOnDate extends _i1.Mock
    implements _i4.GetSpecificTrackedExerciseOnDate {
  MockGetSpecificTrackedExerciseOnDate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TrackedExerciseRepo get repo =>
      (super.noSuchMethod(Invocation.getter(#repo),
          returnValue: _FakeTrackedExerciseRepo()) as _i2.TrackedExerciseRepo);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.GroupedTrackedExercises>> call(
          _i8.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<
                  _i3.Either<_i6.Failure, _i7.GroupedTrackedExercises>>.value(
              _FakeEither<_i6.Failure, _i7.GroupedTrackedExercises>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i7.GroupedTrackedExercises>>);
}
